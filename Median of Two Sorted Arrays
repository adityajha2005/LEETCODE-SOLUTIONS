// class Solution {
// public:
//     double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
//         int j = nums1.size();
//         int k = nums2.size();
//         int sum = 0;
//         // int o = j+k;
//         vector<int> comb;
//         for(int i=0;i<k;i++){
//             comb.push_back(nums2[i]);
//         }
//         for(int i=0;i<j;i++){
//             comb.push_back(nums1[i]);
//         }
//         sort(comb.begin(),comb.end());
//         int o = comb.size();
//         if(o%2!=0){
//             return comb[0/2];
//         }
//         else{
//             return (comb[o/2]+comb[(o/2)-1])/2;
//         }


//     }
// };

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    
        vector<int>v;
    
        for(auto num:nums1)   
            v.push_back(num);
        
        for(auto num:nums2)  
            v.push_back(num);
     
        sort(v.begin(),v.end());  
   
        int n=v.size();  
        
         if(n % 2 != 0)
            return v[n/2];
        else
            return (v[n/2] + v[n/2-1])/2.00000;
        
    }
};
